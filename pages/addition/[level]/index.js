import React, { useEffect, useState } from "react";
import Head from "next/head";
import Link from "next/link";
import styles from "../../../styles/Home.module.css";
import { useRouter } from "next/router";
import { operators, Resultados } from "../../../utils/data";
import ButtonDefault from "../../../components/Button/ButtonDefault";
import Keyboard from "../../../components/Keyboard";
import Results from "../../../components/Results";
import BasicScreen from "../../../components/BasicScreen";

const Basic = () => {
  const router = useRouter();
  const { level } = router.query;
  const [operatorSelect, setOperatorSelect] = useState("");
  const [expression, setExpression] = useState("");
  const [number1, setNumber1] = useState(0);
  const [number2, setNumber2] = useState(0);
  const [resp, setResp] = useState("");
  const [resultsScreen, setResultsScreen] = useState(false);
  const [cont, setCont] = useState(0);

  useEffect(() => {
    const Resultados = [];
    getNum();

    return () => {
      Resultados.splice(0, Resultados.length);
    };
  }, []);

  useEffect(() => {
    cont === 10 ? setResultsScreen(true) : setResultsScreen(false);
  }, [cont]);

  const getNum = () => {
    const operators = ["+", "-", "x", "รท"];
    const operatorIndex = Math.floor(Math.random() * operators.length);
    const num1 = getRandomIntInclusive(1, 20);
    const num2 = getRandomIntInclusive(0, num1);
    const operator = operators[operatorIndex];

    setNumber1(num1);
    setNumber2(num2);
    setOperatorSelect(operator);
    setExpression(`${num1} ${operator} ${num2}`);
    setResp("");
  };

  const getRandomIntInclusive = (min, max) => {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  };

  const verificar = () => {
    if (resp !== "") {
      let val = 0;
      let tempExp;

      switch (operatorSelect) {
        case "+":
          val = number1 + number2;
          break;
        case "-":
          val = number1 - number2;
          break;
        case "x":
          val = number1 * number2;
          break;
        case "รท":
          val = (number1 * number2) / number1;
          break;
        default:
          break;
      }
      if (operatorSelect != "รท") {
        tempExp = {
          expression: `${number1} ${operatorSelect} ${number2} = ${resp}`,
          resp: resp,
          value: val.toString(),
        };
      } else {
        tempExp = {
          expression: `${
            number1 * number2
          } ${operatorSelect} ${number1} = ${number2}`,
          resp: resp,
          value: val.toString(),
        };
      }

      Resultados.push(tempExp);
      console.log(Resultados);
      getNum();
      setCont(cont + 1);
    }
  };

  const click = (param) => {
    setResp((prevResp) => prevResp + param);
  };

  const del = () => {
    setResp((prevResp) => prevResp.slice(0, -1));
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Basic</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {!resultsScreen ? (
        <BasicScreen
          operatorSelect={operatorSelect}
          number1={number1}
          number2={number2}
          resp={resp}
          click={click}
          verificar={verificar}
          del={del}
        />
      ) : (
        <Results Resultados={Resultados} />
      )}
    </div>
  );
};

export default Basic;
